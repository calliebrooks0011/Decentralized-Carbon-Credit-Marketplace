(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INVALID-PRICE u102)
(define-constant ERR-INVALID-LISTING-ID u103)
(define-constant ERR-LISTING-NOT-FOUND u104)
(define-constant ERR-INSUFFICIENT-BALANCE u105)
(define-constant ERR-TRANSFER-FAILED u106)
(define-constant ERR-ALREADY-LISTED u107)
(define-constant ERR-NOT-OWNER u108)
(define-constant ERR-INVALID-RECIPIENT u109)
(define-constant ERR-INVALID-SPENDER u110)
(define-constant ERR-INVALID-ALLOWANCE u111)
(define-constant ERR-ALLOWANCE-EXCEEDED u112)
(define-constant ERR-INVALID-DECIMALS u113)
(define-constant ERR-INVALID-NAME u114)
(define-constant ERR-INVALID-SYMBOL u115)
(define-constant ERR-INVALID-URI u116)
(define-constant ERR-MAX-SUPPLY-EXCEEDED u117)
(define-constant ERR-INVALID-MINTER u118)
(define-constant ERR-INVALID-BURNER u119)
(define-constant ERR-INVALID-RETIRER u120)
(define-constant ERR-RETIRE-FAILED u121)
(define-constant ERR-INVALID-AUCTION-ID u122)
(define-constant ERR-AUCTION-NOT-FOUND u123)
(define-constant ERR-BID-TOOLOW u124)
(define-constant ERR-AUCTION-ENDED u125)
(define-constant ERR-AUCTION-ACTIVE u126)
(define-constant ERR-INVALID-DURATION u127)
(define-constant ERR-INVALID-START-PRICE u128)
(define-constant ERR-INVALID-RESERVE-PRICE u129)

(define-fungible-token carbon-credit u1000000000)

(define-data-var token-name (string-ascii 32) "CarbonCredit")
(define-data-var token-symbol (string-ascii 10) "CC")
(define-data-var token-decimals uint u6)
(define-data-var token-uri (string-utf8 256) u"https://example.com/carbon-credit")
(define-data-var total-supply uint u0)
(define-data-var minter principal tx-sender)
(define-data-var next-listing-id uint u0)
(define-data-var next-auction-id uint u0)

(define-map allowances { owner: principal, spender: principal } uint)
(define-map listings uint { seller: principal, amount: uint, price: uint })
(define-map auctions uint { seller: principal, amount: uint, start-price: uint, reserve-price: uint, end-time: uint, highest-bid: uint, highest-bidder: (optional principal) })
(define-map retired-credits principal uint)

(define-read-only (get-name)
  (ok (var-get token-name)))

(define-read-only (get-symbol)
  (ok (var-get token-symbol)))

(define-read-only (get-decimals)
  (ok (var-get token-decimals)))

(define-read-only (get-balance (account principal))
  (ok (ft-get-balance carbon-credit account)))

(define-read-only (get-total-supply)
  (ok (var-get total-supply)))

(define-read-only (get-token-uri)
  (ok (some (var-get token-uri))))

(define-read-only (get-allowance (owner principal) (spender principal))
  (ok (default-to u0 (map-get? allowances { owner: owner, spender: spender }))))

(define-read-only (get-listing (listing-id uint))
  (map-get? listings listing-id))

(define-read-only (get-auction (auction-id uint))
  (map-get? auctions auction-id))

(define-read-only (get-retired-balance (account principal))
  (ok (default-to u0 (map-get? retired-credits account))))

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      (err ERR-INVALID-AMOUNT)))

(define-private (validate-price (price uint))
  (if (> price u0)
      (ok true)
      (err ERR-INVALID-PRICE)))

(define-private (validate-principal (p principal))
  (if (not (is-eq p 'SP000000000000000000002Q6VF78))
      (ok true)
      (err ERR-NOT-AUTHORIZED)))

(define-private (validate-duration (duration uint))
  (if (> duration u0)
      (ok true)
      (err ERR-INVALID-DURATION)))

(define-private (validate-start-price (price uint))
  (if (> price u0)
      (ok true)
      (err ERR-INVALID-START-PRICE)))

(define-private (validate-reserve-price (reserve uint) (start uint))
  (if (>= reserve start)
      (ok true)
      (err ERR-INVALID-RESERVE-PRICE)))

(define-public (set-minter (new-minter principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq new-minter 'SP000000000000000000002Q6VF78)) (err ERR-NOT-AUTHORIZED))
    (var-set minter new-minter)
    (ok true)))

(define-public (mint (amount uint) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter)) (err ERR-INVALID-MINTER))
    (try! (validate-amount amount))
    (asserts! (not (is-eq recipient 'SP000000000000000000002Q6VF78)) (err ERR-INVALID-RECIPIENT))
    (asserts! (<= (+ (var-get total-supply) amount) (ft-get-supply carbon-credit)) (err ERR-MAX-SUPPLY-EXCEEDED))
    (try! (ft-mint? carbon-credit amount recipient))
    (var-set total-supply (+ (var-get total-supply) amount))
    (ok true)))

(define-public (burn (amount uint))
  (let ((balance (ft-get-balance carbon-credit tx-sender)))
    (asserts! (>= balance amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (validate-amount amount))
    (try! (ft-burn? carbon-credit amount tx-sender))
    (var-set total-supply (- (var-get total-supply) amount))
    (ok true)))

(define-public (transfer (amount uint) (recipient principal) (memo (optional (buff 34))))
  (begin
    (try! (validate-amount amount))
    (asserts! (not (is-eq recipient 'SP000000000000000000002Q6VF78)) (err ERR-INVALID-RECIPIENT))
    (asserts! (or (is-eq tx-sender recipient) (>= (ft-get-balance carbon-credit tx-sender) amount)) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount tx-sender recipient))
    (match memo data (print data) true)
    (ok true)))

(define-public (approve (spender principal) (amount uint))
  (begin
    (asserts! (not (is-eq spender 'SP000000000000000000002Q6VF78)) (err ERR-INVALID-SPENDER))
    (try! (validate-amount amount))
    (ok (map-set allowances { owner: tx-sender, spender: spender } amount))))

(define-public (transfer-from (owner principal) (recipient principal) (amount uint))
  (let ((allowance (default-to u0 (map-get? allowances { owner: owner, spender: tx-sender }))))
    (asserts! (>= allowance amount) (err ERR-ALLOWANCE-EXCEEDED))
    (try! (validate-amount amount))
    (asserts! (not (is-eq recipient 'SP000000000000000000002Q6VF78)) (err ERR-INVALID-RECIPIENT))
    (asserts! (>= (ft-get-balance carbon-credit owner) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount owner recipient))
    (map-set allowances { owner: owner, spender: tx-sender } (- allowance amount))
    (ok true)))

(define-public (list-credits (amount uint) (price uint))
  (let ((listing-id (var-get next-listing-id)))
    (try! (validate-amount amount))
    (try! (validate-price price))
    (asserts! (>= (ft-get-balance carbon-credit tx-sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount tx-sender (as-contract tx-sender)))
    (map-set listings listing-id { seller: tx-sender, amount: amount, price: price })
    (var-set next-listing-id (+ listing-id u1))
    (ok listing-id)))

(define-public (buy-credits (listing-id uint) (amount uint))
  (match (map-get? listings listing-id)
    listing
    (let ((seller (get seller listing)) (list-amount (get amount listing)) (price (get price listing)) (cost (* price amount)))
      (asserts! (<= amount list-amount) (err ERR-INVALID-AMOUNT))
      (try! (stx-transfer? cost tx-sender seller))
      (try! (as-contract (ft-transfer? carbon-credit amount tx-sender buyer)))
      (if (is-eq amount list-amount)
          (map-delete listings listing-id)
          (map-set listings listing-id { seller: seller, amount: (- list-amount amount), price: price }))
      (ok true))
    (err ERR-LISTING-NOT-FOUND)))

(define-public (retire-credits (amount uint))
  (begin
    (try! (validate-amount amount))
    (asserts! (>= (ft-get-balance carbon-credit tx-sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-burn? carbon-credit amount tx-sender))
    (map-set retired-credits tx-sender (+ (default-to u0 (map-get? retired-credits tx-sender)) amount))
    (var-set total-supply (- (var-get total-supply) amount))
    (ok true)))

(define-public (create-auction (amount uint) (start-price uint) (reserve-price uint) (duration uint))
  (let ((auction-id (var-get next-auction-id)) (end-time (+ block-height duration)))
    (try! (validate-amount amount))
    (try! (validate-start-price start-price))
    (try! (validate-reserve-price reserve-price start-price))
    (try! (validate-duration duration))
    (asserts! (>= (ft-get-balance carbon-credit tx-sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount tx-sender (as-contract tx-sender)))
    (map-set auctions auction-id { seller: tx-sender, amount: amount, start-price: start-price, reserve-price: reserve-price, end-time: end-time, highest-bid: u0, highest-bidder: none })
    (var-set next-auction-id (+ auction-id u1))
    (ok auction-id)))

(define-public (place-bid (auction-id uint) (bid-amount uint))
  (match (map-get? auctions auction-id)
    auction
    (let ((end-time (get end-time auction)) (highest-bid (get highest-bid auction)) (highest-bidder (get highest-bidder auction)) (seller (get seller auction)))
      (asserts! (< block-height end-time) (err ERR-AUCTION-ENDED))
      (asserts! (> bid-amount highest-bid) (err ERR-BID-TOOLOW))
      (try! (stx-transfer? bid-amount tx-sender (as-contract tx-sender)))
      (match highest-bidder bidder (try! (as-contract (stx-transfer? highest-bid tx-sender bidder))) true)
      (map-set auctions auction-id (merge auction { highest-bid: bid-amount, highest-bidder: (some tx-sender) }))
      (ok true))
    (err ERR-AUCTION-NOT-FOUND)))

(define-public (end-auction (auction-id uint))
  (match (map-get? auctions auction-id)
    auction
    (let ((end-time (get end-time auction)) (highest-bid (get highest-bid auction)) (highest-bidder (get highest-bidder auction)) (seller (get seller auction)) (amount (get amount auction)) (reserve-price (get reserve-price auction)))
      (asserts! (>= block-height end-time) (err ERR-AUCTION-ACTIVE))
      (if (and (>= highest-bid reserve-price) (is-some highest-bidder))
          (let ((bidder (unwrap! highest-bidder (err ERR-AUCTION-NOT-FOUND)))
                (contract-principal (as-contract tx-sender)))
            (try! (as-contract (stx-transfer? highest-bid contract-principal seller)))
            (try! (as-contract (ft-transfer? carbon-credit amount contract-principal bidder)))
            (ok true))
          (begin
            (try! (as-contract (ft-transfer? carbon-credit amount tx-sender seller)))
            (match highest-bidder bidder (try! (as-contract (stx-transfer? highest-bid tx-sender bidder))) true)
            (ok false)))
      (map-delete auctions auction-id))
    (err ERR-AUCTION-NOT-FOUND)))